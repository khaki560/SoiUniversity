// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace client
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for ServerOperations.
    /// </summary>
    public static partial class ServerOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cred'>
            /// </param>
            public static UserEntry PostlogIn(this IServerOperations operations, Credentials cred)
            {
                return Task.Factory.StartNew(s => ((IServerOperations)s).PostlogInAsync(cred), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cred'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<UserEntry> PostlogInAsync(this IServerOperations operations, Credentials cred, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostlogInWithHttpMessagesAsync(cred, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            public static object PostRegister(this IServerOperations operations, UserEntry user)
            {
                return Task.Factory.StartNew(s => ((IServerOperations)s).PostRegisterAsync(user), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostRegisterAsync(this IServerOperations operations, UserEntry user, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostRegisterWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyRequest'>
            /// </param>
            public static object PostChangePupKey(this IServerOperations operations, KeyRequest keyRequest)
            {
                return Task.Factory.StartNew(s => ((IServerOperations)s).PostChangePupKeyAsync(keyRequest), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='keyRequest'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostChangePupKeyAsync(this IServerOperations operations, KeyRequest keyRequest, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostChangePupKeyWithHttpMessagesAsync(keyRequest, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static IList<MessageEntry> PostDownloadReceived(this IServerOperations operations, string name)
            {
                return Task.Factory.StartNew(s => ((IServerOperations)s).PostDownloadReceivedAsync(name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MessageEntry>> PostDownloadReceivedAsync(this IServerOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDownloadReceivedWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            public static IList<MessageEntry> PostDownloadSent(this IServerOperations operations, string name)
            {
                return Task.Factory.StartNew(s => ((IServerOperations)s).PostDownloadSentAsync(name), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='name'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MessageEntry>> PostDownloadSentAsync(this IServerOperations operations, string name, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostDownloadSentWithHttpMessagesAsync(name, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            public static object PostUpload(this IServerOperations operations, SingleMessage message)
            {
                return Task.Factory.StartNew(s => ((IServerOperations)s).PostUploadAsync(message), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='message'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostUploadAsync(this IServerOperations operations, SingleMessage message, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostUploadWithHttpMessagesAsync(message, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// </param>
            public static object ConfirmDownloadOfMessages(this IServerOperations operations, IList<int?> ids)
            {
                return Task.Factory.StartNew(s => ((IServerOperations)s).ConfirmDownloadOfMessagesAsync(ids), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='ids'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ConfirmDownloadOfMessagesAsync(this IServerOperations operations, IList<int?> ids, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ConfirmDownloadOfMessagesWithHttpMessagesAsync(ids, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// </param>
            public static string GetPubKey(this IServerOperations operations, string userName)
            {
                return Task.Factory.StartNew(s => ((IServerOperations)s).GetPubKeyAsync(userName), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userName'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetPubKeyAsync(this IServerOperations operations, string userName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPubKeyWithHttpMessagesAsync(userName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
